<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="wordcount_sections" script:language="StarBasic">REM  *****  BASIC  *****

&apos; Count words between bookmarked sections -- attached to hotkey Ctrl-Alt-W
&apos; Create insertable wordcount fields for the wordcounts under Insert -&gt; Fields -&gt; More Fields... -&gt; Variables -&gt; User Field
&apos; If there are bookmarks, update the field counts every time the document is saved

&apos; Developed using examples at: https://wiki.documentfoundation.org/Documentation/BASIC_Guide#Searching_for_Text_Portions
&apos; And BASIC API reference at: https://api.libreoffice.org/docs/idl/ref/index.html

Sub on_hotkey  &apos; Set to run on hotkey specified in Accelerators.xcu file of the extension (initially Ctrl-Alt-W)
	if not isTextDocument(ThisComponent) then
		exit sub
	end if
	setupOnSave() &apos;Setup save action to force re-count prior to save
	result = bookmark_wordcounter()

	statusbar = ThisComponent.CurrentController.StatusIndicator
	statusbar.start(result, 100)
	wait 4000  &apos; ms
	statusbar.reset
	statusbar.end
End Sub

Function bookmark_wordcounter()
	doc = ThisComponent
	bookmarks = doc.Bookmarks
	n_bookmarks = bookmarks.getCount()

	cursor = doc.Text.createTextCursor
	cursor.gotoStart(false)

	&apos; Count words at beginning of document up to the first bookmark to include in total
	results = &quot;WORDCOUNT: &quot;
	count = 0
	&apos; on Error goto Continuer1
	if n_bookmarks &gt; 0 then
		bookmark = bookmarks.getByIndex(0)
		cursor.gotoRange(bookmark.Anchor, true) &apos; true = expand selection
	else
		cursor.gotoEnd(true)
	end if
	count = wordcount_string(cursor.String)
Continuer1:
	total = count
	&apos;Uncomment if you want to show # words before the first bookmark
	&apos;results = results &amp; &quot;Beginning&quot; &amp; &quot;=&quot; &amp; count &amp; &quot;, &quot;

	&apos; Count words after each bookmark
	&apos; on Error goto Continuer2
	for i=1 to n_bookmarks
		name = bookmark.name
		cursor.gotoRange(bookmark.Anchor, False) &apos; true = expand selection
		count = 0
		if i &lt; n_bookmarks then
			bookmark = bookmarks.getByIndex(i)
			cursor.gotoRange(bookmark.Anchor, true) &apos; true = expand selection
		else
			cursor.gotoEnd(true)
		end if
		count = wordcount_string(cursor.String)
Continuer2:
		total = total + count
		update_field(&quot;Wordcount_&quot; &amp; name, count)
		results = results &amp; name &amp; &quot;=&quot; &amp; count &amp; &quot;, &quot;
	next i

	&apos; Count words in footnotes so total matches libreoffice total
	fnotes=doc.getFootNotes()
	if fnotes.hasElements() then
		fnotecount=0
		for nfnotes=0 to fnotes.getCount()-1
			thisnote=fnotes.getbyIndex(nfnotes)
			fnotecount=fnotecount+wordcount_string(thisnote.getString())
		next nfnotes
		total = total + fnotecount
		update_field(&quot;Wordcount_Footnotes&quot;, fnotecount)
		results = results &amp; &quot;Footnotes=&quot; &amp; fnotecount &amp; &quot;, &quot;
	end if

	results = results &amp; &quot;Total&quot; &amp; &quot;=&quot; &amp; total
	update_field(&quot;Wordcount_Total&quot;, total)

	&apos; Warn if my calculation is different from libreoffice&apos;s
	&apos; but allow some play in case the user puts a bookmark in the middle of a word which will effectively count it twice (once in each section)
	libreoffice_total = doc.WordCount
	if libreoffice_total &gt; total or libreoffice_total + n_bookmarks &lt; total then
		results = results &amp; &quot; (but libreoffice total=&quot; &amp; libreoffice_total &amp; &quot;)&quot;
	end if

	bookmark_wordcounter = results
End Function

Function wordcount_string(str)
	&apos; Count words using Libreoffice&apos;s WORD_COUNT break iterator
	dim locale as new com.sun.star.lang.Locale
	
	&apos; Treat n-dash and m-dash as spaces.
	&apos; These two characters are the default in Tools -&gt; Options -&gt; Writer -&gt; General -&gt; Wordcount -&gt; Additional Separators
	&apos; If I knew how to fetch that option data, I&apos;d use it here instead of hard-coding it.
	str = replace(str, &quot;–&quot;, &quot; &quot;)
	str = replace(str, &quot;—&quot;, &quot; &quot;)

	brk=createUnoService(&quot;com.sun.star.i18n.BreakIterator&quot;)
	locale.Language=&quot;en&quot;
	boundary_type = com.sun.star.i18n.WordType.WORD_COUNT

	numwords=0
	startpos=0
	nextwd=brk.getWordBoundary(str, startpos, locale, boundary_type, TRUE)
	do while nextwd.endPos &gt; nextwd.startPos
		&apos;Include the following line to display each word as it is counted -- for debug purposes
		&apos;msgbox(nextwd.startPos &amp; &quot; &quot; &amp; nextwd.endPos &amp; &quot;: &quot; &amp; mid(str, nextwd.startPos+1, nextwd.endPos-nextwd.startPos))
		numwords=numwords+1
		nextwd=brk.nextWord(str, nextwd.startPos, locale, boundary_type)
	loop
	wordcount_string=numwords
End Function

Function update_field(varname, value)
	&apos; Update user field variable `varname`, creating it if necessary
	doc = ThisComponent
	user_path = &quot;com.sun.star.text.fieldmaster.User&quot;
	var_path = user_path &amp; &quot;.&quot; &amp; varname
	on error goto ErrorHandler
		var = doc.getTextFieldMasters.getByName(var_path)
	on error goto 0
	var.Value = value
	exit function
ErrorHandler:
	var = doc.createInstance(user_path)
	var.Name = varname
	resume next
End Function

function isTextDocument(doc) as boolean
	&apos; Taken from https://wiki.openoffice.org/wiki/Currently_active_document
	isTextDocument = FALSE
	if HasUnoInterfaces(doc, &quot;com.sun.star.lang.XServiceInfo&quot;) then
	   if doc.supportsService (&quot;com.sun.star.text.GenericTextDocument&quot;) then
	      isTextDocument = TRUE
		end if
	end if
End Function

Sub OnSave(oEvent As Object)
	if isTextDocument(ThisComponent) then
		if ThisComponent.Bookmarks.getCount() &gt; 0 then
			bookmark_wordcounter()
		end if
	end if
End Sub

Sub setupOnSave()
	&apos; Connects the LibreOffice &quot;Save Document&quot; event to our Basic subroutine `GlobalOnSave()`.
	&apos; It adds OnSave to globalEventBroadcaster instead of ThisComponent (current doc) because
	&apos; otherwise LibreOffice produces a warning that this document has macros.
	&apos; Copies a stub subroutine GlobalOnSave() into the Standard library
	&apos; so that OnSave doesn&apos;t produce errors even if the extension is uninstalled.
	copy_code(&quot;Wordcounter&quot;, &quot;wordcount_sections&quot;, &quot;Standard&quot;, &quot;wordcount_sections&quot;, &quot;copy_marker&quot;)

	Dim aProps(1) As New com.sun.star.beans.PropertyValue
	aProps(0).Name		= &quot;EventType&quot;
	aProps(0).Value		= &quot;Script&quot;
	aProps(1).Name		= &quot;Script&quot;
	aProps(1).Value		= &quot;vnd.sun.star.script:Standard.wordcount_sections.GlobalOnSave?language=Basic&amp;location=application&quot;

	Dim oGlobalEventBroadcaster As Object
	oGlobalEventBroadcaster = GetDefaultContext().getByName( &quot;/singletons/com.sun.star.frame.theGlobalEventBroadcaster&quot; )
	oGlobalEventBroadcaster.Events.replaceByName(&quot;OnSave&quot;, aProps())
End Sub

Sub copy_code(fromlib, frommod, tolib, tomod, marker)
	&apos; Copy code after _marker_ from fromlib/frommod into module tolib/tomod
	libs = globalscope.basiclibraries
	libs.loadlibrary(fromlib)
	libr = libs.getbyname(fromlib)
	module = libr.getbyname(frommod)

	textSearch = CreateUnoService(&quot;com.sun.star.util.TextSearch&quot;)
	options = CreateUnoStruct(&quot;com.sun.star.util.SearchOptions&quot;)
	options.algorithmType = com.sun.star.util.SearchAlgorithms.REGEXP
	options.searchString = &quot;_&quot; &amp; marker &amp; &quot;_&quot;
	textSearch.setOptions(options)
	found = textSearch.searchForward(module, 0, Len(module))
	code = right(module, Len(module) - found.endOffset(0) - 1)

	libr = libs.getbyname(tolib)
	if not libs.hasbyname(tolib) then
		libs.insertbyname(tolib)
	end if
	if not libr.hasbyname(tomod) then
		libr.insertbyname(tomod,code)
	else
		libs.loadlibrary(tolib)
		&apos;libr.removebyname(tomod)
		libr.replacebyname(tomod,code)
	end if
	libs.storelibraries()
End Sub


&apos; The rest of this file gets copied to Standard library so OnSave doesn&apos;t create an error if extension is uninstalled
&apos; _copy_marker_
Sub GlobalOnSave(oEvent As Object)
	&apos; This subroutine gets connected to the &quot;Save Document&quot; event of LibreOffice, OnSaveAs.
	&apos; It provides a stub so that the OnSave event doesn&apos;t create errors even if the Wordcounter extension is removed
	library = &quot;Wordcounter&quot;
	if globalscope.basiclibraries.hasbyname(library) then
		basiclibraries.loadLibrary(library)
		on Error goto Continuer
		Wordcounter.wordcount_sections.OnSave(oEvent)
Continuer:
	end if
End Sub

</script:module>